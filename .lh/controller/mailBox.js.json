{
    "sourceFile": "controller/mailBox.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1671164193769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1671164193769,
            "name": "Commit-0",
            "content": "const asyncHandler = require(\"../middleware/async\");\r\nconst newsLetter = require(\"../Model/NewsLetter\");\r\nconst Subscribers = require(\"../Model/Subscriber\");\r\nconst sendMail = require(\"../helper/mailer\");\r\nconst { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\nconst Company = require(\"../Model/Company\");\r\nconst CompanyMail = require(\"../Model/CompanyMail\");\r\nconst User = require(\"../Model/user\");\r\n\r\n// =================================================   News letter mailbox APIs ======================================================\r\n\r\n// get all subscribers\r\nexports.getSubscribers = asyncHandler(async (req, res, next) => {\r\n  const { sort, order } = req.body;\r\n\r\n  let find = {};\r\n  var sortObject = {};\r\n  var stype = sort ? sort : \"createdAt\";\r\n  var sdir = order === \"ASC\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  var status = req.body.status ? req.body.status : { $in: [1, 2] };\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  if (req.body.search) {\r\n    find = {\r\n      $and: [\r\n        {\r\n          email: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n      ],\r\n      status: status,\r\n    };\r\n  } else {\r\n    find = { status: status };\r\n  }\r\n\r\n  const subscriber = await Subscribers.find(find).skip(startIndex).limit(limit).sort(sortObject);\r\n  const totalRecord = await Subscribers.find(find).countDocuments();\r\n  const tpage = totalRecord / limit;\r\n  const totalpage = Math.ceil(tpage);\r\n\r\n  if (subscriber.length == 0) {\r\n    return giveresponse(res, 400, false, \"No subscriber found!\");\r\n  }\r\n  giveresponse(res, 200, true, \"All subscribers get successfully!\", { totalpage, page, totalRecord, subscriber });\r\n});\r\n\r\n// send mail to all subscribers --> 2 - subscribed\r\nexports.sendEmailToSubscriber = asyncHandler(async (req, res, next) => {\r\n  const { subject, description } = req.body;\r\n  const subscribers = await Subscribers.find({ status: 2 }).select(\"email\");\r\n  const mailList = [];\r\n  const sentList = [];\r\n\r\n  (await subscribers.length) > 0 &&\r\n    subscribers?.map((item) => {\r\n      mailList.push(item.email);\r\n      sentList.push(item._id);\r\n    });\r\n\r\n  if (subscribers.length == 0) {\r\n    return giveresponse(res, 400, false, \"No subscriber found!\");\r\n  }\r\n\r\n  var sent1 = await sendMail(mailList, subject, description);\r\n  if (sent1 != \"0\") {\r\n    const newsletter = await newsLetter.findOneAndUpdate({ subject, description }, { $set: { subject, description, sent: sentList } }, { upsert: true });\r\n    return giveresponse(res, 200, true, \"Notification has been sent successfully!\");\r\n  } else {\r\n    return giveresponse(res, 400, false, \"Something went wrong!, please try again later\");\r\n  }\r\n});\r\n\r\n// get all whom the mail has been sent\r\nexports.getSentData = asyncHandler(async (req, res, next) => {\r\n  const { sort, order } = req.body;\r\n\r\n  var sortObject = {};\r\n  var stype = sort ? sort : \"createdAt\";\r\n  var sdir = order === \"ASC\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  const sentData = await newsLetter.aggregate([\r\n    {\r\n      $project: {\r\n        sent: 1,\r\n        createdAt: 1,\r\n        subject: 1,\r\n        description: 1,\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"subscribers\",\r\n        localField: \"sent\",\r\n        foreignField: \"_id\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              email: 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"sent\",\r\n      },\r\n    },\r\n    {\r\n      $unwind: \"$sent\",\r\n    },\r\n    { $skip: startIndex },\r\n    { $limit: limit },\r\n    { $sort: sortObject },\r\n  ]);\r\n\r\n  const totalRecord = sentData?.length;\r\n  const tpage = totalRecord / limit;\r\n  const totalPage = Math.ceil(tpage);\r\n\r\n  if (sentData.length == 0) {\r\n    giveresponse(res, 400, false, \"Email sent data not found!\");\r\n  }\r\n\r\n  giveresponse(res, 200, true, \"Email sent data get successfully!\", { totalPage, totalRecord, page, sentData });\r\n});\r\n\r\n// ===================================================== Company mailbox APIs  ======================================================\r\n\r\n// company names list to send email\r\nexports.getCompanyNames = asyncHandler(async (req, res, next) => {\r\n  const { search } = req.body;\r\n\r\n  const companies = await Company.find({ company_name: { $regex: search, $options: \"i\" } })\r\n    .populate(\"userid\", \"-_id email\")\r\n    .select(\"_id company_name\")\r\n    .limit(10);\r\n  giveresponse(res, 200, true, \"Company list get successfully!\", companies);\r\n});\r\n\r\n// send mail to company\r\nexports.sendEmailToCompany = asyncHandler(async (req, res, next) => {\r\n  const { subject, description, company_doc, email } = req.body;\r\n  let path = [];\r\n  if (company_doc && company_doc.length > 0) {\r\n    company_doc.map((doc) => {\r\n      path.push(doc.path);\r\n    });\r\n  }\r\n  var sent = await sendMail(email, subject, description, company_doc);\r\n  if (sent != \"0\") {\r\n    const newMail = new CompanyMail({ subject, description, document: path, company_email: email, mail_type: 1 });\r\n    await newMail.save();\r\n    return giveresponse(res, 200, true, \"Notification has been sent successfully!\");\r\n  } else {\r\n    return giveresponse(res, 400, false, \"Something went wrong!, please try again later\");\r\n  }\r\n});\r\n\r\n// get all mail history of company and user --> 1- user, 2-company\r\nexports.getInbox = asyncHandler(async (req, res, next) => {\r\n  const { sort, order, mail_type } = req.body;\r\n\r\n  let sortObject = {};\r\n  var stype = sort ? sort : \"createdAt\";\r\n  var sdir = order?.toLowerCase() == \"asc\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  const allMail = await CompanyMail.find({ mail_type }).skip(startIndex).limit(limit).sort(sortObject);\r\n  const totalRecord = await CompanyMail.find({ mail_type }).countDocuments();\r\n  const tpage = totalRecord / limit;\r\n  const totalPage = Math.ceil(tpage);\r\n\r\n  if (allMail.length == 0) {\r\n    return giveresponse(res, 400, false, \"No mail found!\");\r\n  }\r\n  giveresponse(res, 200, true, \"Company inbox get successfully!\", { page, totalPage, totalRecord, allMail });\r\n});\r\n\r\n// ===================================================== User mailbox APIs  ======================================================\r\n\r\nexports.getUserNames = asyncHandler(async (req, res, next) => {\r\n  const { search } = req.body;\r\n  const userNames = await User.find({\r\n    $or: [{ fname: { $regex: search, $options: \"i\" } }, { lname: { $regex: search, $options: \"i\" } }],\r\n  })\r\n    .select(\"email fname lname\")\r\n    .limit(10);\r\n\r\n  giveresponse(res, 200, true, \"User names get successfully!\", userNames);\r\n});\r\n\r\n// send mail to user\r\nexports.sendEmailToUser = asyncHandler(async (req, res, next) => {\r\n  const { subject, description, user_doc, email } = req.body;\r\n  let path = [];\r\n  if (user_doc && user_doc.length > 0) {\r\n    user_doc.map((doc) => {\r\n      path.push(doc.path);\r\n    });\r\n  }\r\n  var sent = await sendMail(email, subject, description, user_doc);\r\n  if (sent != \"0\") {\r\n    const newMail = new CompanyMail({ subject, description, document: path, user_email: email, mail_type: 2 });\r\n    await newMail.save();\r\n    return giveresponse(res, 200, true, \"Notification has been sent successfully!\");\r\n  } else {\r\n    return giveresponse(res, 400, false, \"Something went wrong!, please try again later\");\r\n  }\r\n});\r\n"
        }
    ]
}