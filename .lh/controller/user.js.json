{
    "sourceFile": "controller/user.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1671163365764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1671163392047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const { giveresponse } = require(\"../helper/res_help.js\");\r\n-const User = require(\"../Model/User\");\r\n+const User = require(\"../Model/user\");\r\n const Connect = require(\"../Model/connect\");\r\n const sendMail = require(\"../helper/mailer\");\r\n const sendSms = require(\"../helper/message_sender\");\r\n const asynchandler = require(\"../middleware/async\");\r\n"
                },
                {
                    "date": 1671163436312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const { giveresponse } = require(\"../helper/res_help.js\");\r\n const User = require(\"../Model/user\");\r\n-const Connect = require(\"../Model/connect\");\r\n+const Connect = require(\"../Model/Connect\");\r\n const sendMail = require(\"../helper/mailer\");\r\n const sendSms = require(\"../helper/message_sender\");\r\n const asynchandler = require(\"../middleware/async\");\r\n \r\n"
                },
                {
                    "date": 1671163589837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const { giveresponse } = require(\"../helper/res_help.js\");\r\n const User = require(\"../Model/user\");\r\n-const Connect = require(\"../Model/Connect\");\r\n+const Connect = require(\"../Model/connect\");\r\n const sendMail = require(\"../helper/mailer\");\r\n const sendSms = require(\"../helper/message_sender\");\r\n const asynchandler = require(\"../middleware/async\");\r\n \r\n"
                },
                {
                    "date": 1672286354932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,10 @@\n \tuser.resetToken = \"\";\r\n \tuser.save();\r\n \tconst {password,...info} = user._doc;\r\n \tgiveresponse(res,200,true,'password set successfully',info)\r\n-})\r\n+});\r\n+\r\n // log in\r\n exports.login = asynchandler(async (req, res) => {\r\n \tconst { email, password } = req.body;\r\n \tif (!email || !password) {\r\n"
                },
                {
                    "date": 1672286727030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n \tuser.save();\r\n \tconst {password,...info} = user._doc;\r\n \tgiveresponse(res,200,true,'password set successfully',info)\r\n });\r\n-\r\n // log in\r\n exports.login = asynchandler(async (req, res) => {\r\n \tconst { email, password } = req.body;\r\n \tif (!email || !password) {\r\n"
                }
            ],
            "date": 1671163365764,
            "name": "Commit-0",
            "content": "const { giveresponse } = require(\"../helper/res_help.js\");\r\nconst User = require(\"../Model/User\");\r\nconst Connect = require(\"../Model/connect\");\r\nconst sendMail = require(\"../helper/mailer\");\r\nconst sendSms = require(\"../helper/message_sender\");\r\nconst asynchandler = require(\"../middleware/async\");\r\n\r\n// user sign up (create user)\r\nexports.signup = asynchandler(async (req, res) => {\r\n\tconst exists = await User.findOne({\r\n\t\temail: req.body.email,\r\n\t\tphone: req.body.phone,\r\n\t\tis_varified: 0,\r\n\t});\r\n\r\n\tif (exists) {\r\n\t\tgiveresponse(res, 201, false, \"Email or Phone Number Already exist please try with other\");\r\n\t} else {\r\n\t\tconst exists = await User.findOne({\r\n\t\t\temail: req.body.email,\r\n\t\t\tphone: req.body.phone,\r\n\t\t\tis_varified: 1,\r\n\t\t});\r\n\r\n\t\tconst socialExists = await Connect.find({ $or: [{ googleEmail: req.body.email }, { facebookEmail: req.body.email }] });\r\n\r\n\t\tif (exists) {\r\n\t\t\t//return res.status(400).send('email already exists');\r\n\t\t\tgiveresponse(res, 201, false, \"email/phone_number already exists\");\r\n\t\t} else if (socialExists > 0) {\r\n\t\t\tgiveresponse(res, 201, false, \"Email exist please try with other\");\r\n\t\t} else {\r\n\t\t\tconst { fname, lname, phone, email} = req.body;\r\n\t\t\tconst user = new User({ fname, lname, phone, email});\r\n\t\t\tuser.status = 1;\r\n\t\t\tuser.device_type = req.header(\"device-type\");\r\n\r\n\t\t\tawait user.save();\r\n\t\t\tconst resetToken = await user.getResetPasswordToken();\r\n\r\n\t\t\tuser.resetToken = resetToken;\r\n\t\t\tuser.save();\r\n\r\n\t\t\tconst URL = process.env.LIVE == 1 ? process.env.ADMINFRONTURL : process.env.LOCALURL;\r\n\t\t\tconst link = `${URL}/setpassword?${user.resetToken}`;\r\n\r\n\t\t\tconst subject = \"Your Startup Geeks account Password\";\r\n\t\t\tconst message = `We have sent a password reset link to your registered email ID ${link}`;\r\n\r\n\t\t\tawait sendMail(req.body.email, subject, message);\r\n\t\t\t// await sendSms(req.body.contact_no, message);\r\n\r\n\t\t\tgiveresponse(res, 200, true, \"user created Successfully!\", user);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// admin sign up\r\n// router.post(\"/adminsignup\",asynchandler(async (req, res) => {\r\n//     const exists = await User.findOne({\r\n//       email: req.body.email,\r\n//       phone: req.body.phone,\r\n//     });\r\n\r\n//     if (exists) {\r\n//       //return res.status(400).send('email already exists');\r\n//       giveresponse(res, 201, false, \"email/phone_number already exists\");\r\n//     } else {\r\n//       const { fname, lname, phone, email, password } = req.body;\r\n\r\n//       const user = new User({\r\n//         fname,\r\n//         lname,\r\n//         phone,\r\n//         email,\r\n//         password,\r\n//       });\r\n//       (user.status = 1), (user.role = 1);\r\n//       user.device_type = req.header(\"device-type\");\r\n\r\n//       const token = await user.generateAuthToken();\r\n\r\n//       await user.save();\r\n//       delete user._doc.password;\r\n//       giveresponse(res, 200, true, \"user created Successfully!\", {\r\n//         fname: user.fname,\r\n//         lname: user.lname,\r\n//         email: user.email,\r\n//         phone: user.phone,\r\n//         role: user.role,\r\n//         token,\r\n//       });\r\n//     }\r\n//   })\r\n// );\r\n\r\n// set password \r\nexports.setPassword = asynchandler(async(req,res) => {\r\n\tconst user = await User.findOne({resetToken: req.params.token}).select(\"+password\");\r\n\tuser.password = req.body.password;\r\n\tuser.resetToken = \"\";\r\n\tuser.save();\r\n\tconst {password,...info} = user._doc;\r\n\tgiveresponse(res,200,true,'password set successfully',info)\r\n})\r\n// log in\r\nexports.login = asynchandler(async (req, res) => {\r\n\tconst { email, password } = req.body;\r\n\tif (!email || !password) {\r\n\t\treturn giveresponse(res, 400, false, \" Please provide an email and password\");\r\n\t}\r\n\tconst user = await User.findOne({ email, role: 0 }).select(\"+password\");\r\n\t// console.log(user);\r\n\r\n\tif (!user) {\r\n\t\tconst user = await User.findOne({ email, role: 1 }).select(\"+password\");\r\n\t\tif (!user) {\r\n\t\t\treturn giveresponse(res, 400, false, \"user does not exists\");\r\n\t\t} else {\r\n\t\t\t//check if password matches\r\n\r\n\t\t\tconst isMatch = await user.matchPassword(password);\r\n\r\n\t\t\tif (!isMatch) {\r\n\t\t\t\treturn giveresponse(res, 400, false, \"Invalid credentials\");\r\n\t\t\t}\r\n\t\t\tconst token = await user.generateAuthToken();\r\n\r\n\t\t\t//const loginUser = await User.findOne({ email });\r\n\t\t\tdelete user._doc.password;\r\n\t\t\tgiveresponse(res, 200, true, \"Login Successful!\", { user, token });\r\n\t\t}\r\n\t}\r\n\r\n\t//check if password matches\r\n\telse {\r\n\t\tif (user.status == 0) {\r\n\t\t\tgiveresponse(res, 400, false, \"Unverfied user\");\r\n\t\t} else if (user.status == 2) {\r\n\t\t\tgiveresponse(res, 400, false, \"disabled user\");\r\n\t\t} else if (user.status == 3) {\r\n\t\t\tgiveresponse(res, 400, false, \"banned user\");\r\n\t\t} else {\r\n\t\t\tconst isMatch = await user.matchPassword(password);\r\n\r\n\t\t\tif (!isMatch) {\r\n\t\t\t\treturn giveresponse(res, 400, false, \"Invalid credentials\");\r\n\t\t\t}\r\n\t\t\tconst token = await user.generateAuthToken();\r\n\r\n\t\t\t//const loginUser = await User.findOne({ email });\r\n\t\t\tdelete user._doc.password;\r\n\t\t\tgiveresponse(res, 200, true, \"Login Successful!\", {\r\n\t\t\t\tuser,\r\n\t\t\t\ttoken,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// get user\r\nexports.getuser = asynchandler(async (req, res) => {\r\n\tconst user = await User.findById(req.body._id).select(\"fname lname email phone\");\r\n\r\n\tif (!user) {\r\n\t\tgiveresponse(res, 201, false, \"user can not find with this id\");\r\n\t}\r\n\r\n\treturn giveresponse(res, 200, true, \"user information get successfully\", user);\r\n});\r\n\r\n//update user\r\nexports.updateuser = asynchandler(async (req, res) => {\r\n\tconst user = await User.findById(req.body._id);\r\n\r\n\tif (!user) {\r\n\t\tgiveresponse(res, 201, false, \"user can not find with this id\");\r\n\t}\r\n\tconst updateUser = await User.findByIdAndUpdate(user._id, req.body, {\r\n\t\tnew: true,\r\n\t\trunValidators: true,\r\n\t});\r\n\r\n\tgiveresponse(res, 200, true, \"user update successfully\", updateUser);\r\n});\r\n\r\n// forgot password\r\nexports.forgotPassword = asynchandler(async (req, res) => {\r\n\tif ((req.body.email != \"\" || req.body.phone == \"\")){\r\n\t\tvar user = await User.findOne({ email: req.body.email });\r\n\t\tif (!user) {\r\n\t\t\tgiveresponse(res, 400, false, \"user does not exists\");\r\n\t\t} \r\n\t}\r\n\telse if ((req.body.email == \"\"|| req.body.phone != \"\")){\r\n\t\tvar user = await User.findOne({ phone: req.body.phone });\r\n\t\tif (!user) {\r\n\t\t\tgiveresponse(res, 400, false, \"user does not exists\");\r\n\t\t} \r\n\t}\r\n\t\tconst resetToken = await user.getResetPasswordToken();\r\n\r\n\t\tuser.resetToken = resetToken;\r\n\r\n\t\tconst URL = process.env.LIVE == 1 ? process.env.ADMINFRONTURL : process.env.LOCALURL;\r\n\t\tconst link = `${URL}/reset-password?${user.resetToken}`;\r\n\t\tuser.token_timestamp = new Date();\r\n\t\tuser.save();\r\n\r\n\t\tconst subject = \"password-forgot\";\r\n\t\tconst message = `your forget password link is ${link}`;\r\n\t\tif (req.body.email != \"\" && req.body.phone == \"\") {\r\n\t\t\tawait sendMail(req.body.email, subject, message);\r\n\t\t} \r\n\t\telse if(req.body.phone != \"\" && req.body.email == \"\") {\r\n\t\t\tawait sendSms(req.body.phone, message);\r\n\t\t}\r\n\t\tgiveresponse(res, 200, true, \"We have sent a password reset link to your registered email ID\", user);\r\n});\r\n\r\n// reset password\r\nexports.reSet = asynchandler(async (req, res) => {\r\n\tconst user = await User.findOne({resetToken: req.params.token,}).select(\"+password\");\r\n\tif(new Date() - new Date(token_timestamp) >= 900000){\r\n\t\treturn giveresponse(res,201,false,'link time expire, please send again')\r\n\t}\r\n\telse{\r\n\t\tif (!user) {\r\n\t\t\treturn giveresponse(res, 201, false, \"invalid link or expired\");\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(req.body.password){\r\n\t\t\t\tconst isMatch = await user.matchPassword(req.body.password);\r\n\t\t\t\tif(!isMatch){\r\n\t\t\t\t\tuser.password = req.body.password;\r\n\t\t\t\t\tuser.resetToken = \"\";\r\n\t\t\t\t\tawait user.save();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ((user.resetToken = \"\")) {\r\n\t\t\t\t\t\treturn giveresponse(res, 201, false, \"Link Time Expire please send again\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn giveresponse(res, 201, false, \"this password already axist. add other one\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgiveresponse(res, 200, true, \"password reset successfully\",user);\r\n\t\t}\r\n\t}\r\n});  \r\n\r\n// social login\r\n// exports.socialMediaLogin = asynchandler(async (req, res) => {\r\n\r\n//   const existUser = await User.findOne({ email: req.body.email });\r\n//   let socialConnection;\r\n//   if (req.body.social_type == \"google\") {\r\n//       socialConnection = await Connect.find({ googleEmail: req.body.email, isGoogle: 1 })\r\n//   }\r\n//   else if (req.body.social_type == \"facebook\") {\r\n//       socialConnection = await Connect.find({ facebookEmail: req.body.email, isFacebook: 1 })\r\n//   }\r\n\r\n//   if (socialConnection.length > 0 && !existUser) {\r\n//       const logUser = await User.findOne({ _id: socialConnection[0].user, role: 0 })\r\n//       console.log(logUser, \"logUser\")\r\n//       if (logUser.status == 0) {\r\n//           giveresponse(res, 201, false, \"Unverfied user\");\r\n//       } else if (logUser.status == 2) {\r\n//           giveresponse(res, 201, false, \"disabled  user\");\r\n//       } else if (logUser.status == 3) {\r\n//           giveresponse(res, 201, false, \"banned user\");\r\n//       }\r\n//       else {\r\n//           const token = await logUser.generateAuthToken();\r\n//           if (req.body.fcm_token) {\r\n//               logUser.fcm_token = req.body.fcm_token\r\n//           }\r\n//           if (req.body.social_type == \"google\") {\r\n//               logUser.google_social_token = req.body.social_login_token;\r\n//               logUser.google_social_id = req.body.social_id;\r\n//           } else if (req.body.social_type == \"facebook\") {\r\n//               logUser.facebook_login = 1;\r\n//               logUser.facebook_social_id = req.body.social_id;\r\n//           }\r\n//           await logUser.save()\r\n//           giveresponse(res, 200, true, \"Login Successful\", {\r\n//               user: logUser,\r\n//               token: token\r\n//           })\r\n//       }\r\n//   }\r\n//   else if (!existUser) {\r\n//       const newUser = await new User({\r\n//           email: req.body.email,\r\n//           device_type: req.header(\"device-type\"),\r\n//       });\r\n//       newUser.social_token = req.body.social_login_token;\r\n//       newUser.social_type = req.body.social_type;\r\n//       newUser.phone = req.body.phone;\r\n//       newUser.fname = req.body.fname;\r\n//       newUser.lname = req.body.lname;\r\n//       newUser.status = 1;\r\n//       newUser.is_social = 1;\r\n//       newUser.role = req.body.role;\r\n//       newUser.profile_img = req.body.profile_img && req.body.profile_img;\r\n\r\n//       if (req.body.social_type == \"google\") {\r\n//           newUser.google_login = 1;\r\n//           newUser.google_social_token = req.body.social_login_token;\r\n//           newUser.is_social = 1;\r\n//           newUser.google_social_id = req.body.social_id;\r\n//       } else if (req.body.social_type == \"facebook\") {\r\n//           newUser.facebook_login = 1;\r\n//           newUser.facebook_social_token = req.body.social_login_token;\r\n//           newUser.is_social = 1;\r\n//           newUser.facebook_social_id = req.body.social_id;\r\n//       }\r\n\r\n//       //create and assign a tocken\r\n//       const token = await newUser.generateAuthToken();\r\n//       //const token = jwt.sign({ _id: newUser._id, role: newUser.role }, process.env.JWT_SECRET_KEY);\r\n//       //await newUser.generateAuthToken();\r\n//       await newUser.save();\r\n//       console.log(newUser);\r\n//       giveresponse(res, 200, true, \"Details Added Succesfully\", {\r\n//           user: newUser,\r\n//           token: token,\r\n//       });\r\n//   } else {\r\n//       var email = req.body.email;\r\n//       delete req.body.email;\r\n//       delete req.body.phone;\r\n//       delete req.body.fname;\r\n//       delete req.body.lname;\r\n\r\n//       const logUser = await User.findOneAndUpdate(\r\n//           {\r\n//               $and: [\r\n//                   { email: email },\r\n//                   { $or: [{ is_social: 0 }, { is_social: 1 }] },\r\n//               ],\r\n//           },\r\n\t\t\t// req.body,\r\n//           { new: true }\r\n//       );\r\n\r\n//       if (req.body.social_type == \"google\") {\r\n//           logUser.google_social_token = req.body.social_login_token;\r\n//           logUser.google_login = 1;\r\n//           logUser.is_social = 1;\r\n//           logUser.google_social_id = req.body.social_id;\r\n//       } else if (req.body.social_type == \"facebook\") {\r\n//           logUser.facebook_login = 1;\r\n//           logUser.facebook_social_token = req.body.social_login_token;\r\n//           logUser.is_social = 1;\r\n//           logUser.facebook_social_id = req.body.social_id;\r\n//       }\r\n//       await logUser.save();\r\n\r\n//       //create and assign a tocken\r\n\r\n//       const token = await logUser.generateAuthToken();\r\n//       //const token = jwt.sign({ _id: logUser._id, role: logUser.role }, process.env.JWT_SECRET_KEY);\r\n//       giveresponse(res, 200, true, \"Login Succesfully\", {user: logUser,token: token,});\r\n//   }\r\n// });\r\n\r\n"
        }
    ]
}