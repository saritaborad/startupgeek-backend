{
  "sourceFile": "controller/company.js",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 0,
      "patches": [
        {
          "date": 1673590212221,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        }
      ],
      "date": 1673590212221,
      "name": "Commit-0",
      "content": "const { giveresponse } = require(\"../helper/res_help.js\");\r\nconst Company = require(\"../Model/Company\");\r\nconst asynchandler = require(\"../middleware/async\");\r\nconst User = require(\"../Model/User.js\");\r\nconst UserPlan = require(\"../Model/UserPlan\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\n\r\n// create company\r\nexports.addCompany = asynchandler(async (req, res, next) => {\r\n  const plan = await UserPlan.findOne({_id:req.body.userPlanId});\r\n  var obj = {\r\n    userid: req.uId,\r\n    userPlanId: req.body.userPlanId,\r\n    Cname: req.body.Cname,\r\n    designator: req.body.designator,\r\n    company_name: `${req.body.Cname} ${req.body.designator}`,\r\n    industry: req.body.industry,\r\n    owners: req.body.owners,\r\n    business_purpose: req.body.business_purpose,\r\n    authorized_no: req.body.authorized_no,\r\n    share_value: req.body.share_value,\r\n    shareholders_no: req.body.shareholders_no,\r\n    street_address: req.body.street_address,\r\n    address: req.body.address,\r\n    city: req.body.city,\r\n    state: req.body.state,\r\n    entity_type: req.body.entity_type,\r\n    formation_state: req.body.formation_state,\r\n    service_state: req.body.service_state,\r\n    confirm_company_name: req.body.confirm_company_name,\r\n    zip_code: req.body.zip_code,\r\n    description: req.body.description,\r\n    planstatus: true,\r\n    company_type : plan.company_type\r\n  };\r\n\r\n  var company = await Company.find({ Cname: { $in: req.body.Cname } });\r\n  if (company.length === 0) {\r\n    var newData = await Company.create(obj);\r\n    // const userplan = await UserPlan.findOne({_id: req.body.userPlanId})\r\n    // userplan.company_id = newData._id\r\n    // userplan.save()\r\n    return giveresponse(res, 200, true, \"company add successfully\", newData);\r\n  } else if (company) {\r\n    return giveresponse(res, 200, true, \"company name already exist\");\r\n  }\r\n});\r\n\r\n// update data\r\nexports.updateInfo = asynchandler(async (req, res, next) => {\r\n  const obj = {\r\n    Cname: req.body.Cname,\r\n    designator: req.body.designator,\r\n    company_name: `${req.body.Cname} ${req.body.designator}`,\r\n    industry: req.body.industry,\r\n    owners: req.body.owners,\r\n    business_purpose: req.body.business_purpose,\r\n    authorized_no: req.body.authorized_no,\r\n    share_value: req.body.share_value,\r\n    shareholders_no: req.body.shareholders_no,\r\n    street_address: req.body.street_address,\r\n    address: req.body.address,\r\n    city: req.body.city,\r\n    state: req.body.state,\r\n    entity_type: req.body.entity_type,\r\n    formation_state: req.body.formation_state,\r\n    service_state: req.body.service_state,\r\n    confirm_company_name: req.body.confirm_company_name,\r\n    zip_code: req.body.zip_code,\r\n    description: req.body.description,\r\n  };\r\n\r\n  const infoUpdate = await Company.findByOneAndUpdate({ _id: req.body._id }, obj, { new: true });\r\n\r\n  giveresponse(res, 200, true, \"information update successfully\", infoUpdate);\r\n});\r\n\r\n// get company\r\nexports.getcompany = asynchandler(async (req, res, next) => {\r\n  // const company = await Company.findOne({_id:req.body._id,userid:req.uId});\r\n  const { _id } = req.body;\r\n  const company = await Company.aggregate([\r\n    {\r\n      $match: {\r\n        _id: mongoose.Types.ObjectId(_id),\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"userplans\",\r\n        localField: \"userid\",\r\n        foreignField: \"userid\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              userid: 1,\r\n              \"plan.name\": 1,\r\n              stateName: 1,\r\n              service_type: 1,\r\n              total: 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"plan\",\r\n      },\r\n    },\r\n    {\r\n      $match: {\r\n        $or: [{ Cname: { $regex: `.*${req.body.search?.trim()}.*`, $options: \"i\" } }, { \"plan.stateName\": { $regex: `.*${req.body.search?.trim()}.*`, $options: \"i\" } }, { \"plan.total\": { $regex: `.*${req.body.search?.trim()}.*`, $options: \"i\" } }, { \"plan.plan.name\": { $regex: `.*${req.body.search?.trim()}.*`, $options: \"i\" } }],\r\n      },\r\n    },\r\n    {\r\n      $unwind: {\r\n        path: \"$plan\",\r\n      },\r\n    },\r\n    {\r\n      $unwind: {\r\n        path: \"$plan.plan\",\r\n      },\r\n    },\r\n  ]);\r\n  if (!company) return giveresponse(res, 201, \"company data can not get with this id\");\r\n  giveresponse(res, 200, true, \"single company information get successfully\", company);\r\n});\r\n\r\n// get all company\r\nexports.getCompanyGroup = asynchandler(async (req, res, next) => {\r\n  const page = req.body.page || 1;\r\n  const limit = req.body.limit || 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  const user = await User.findOne({ _id: req.uId });\r\n  if (user.role == 1) {\r\n    var company = await Company.find().skip(startIndex).limit(limit);\r\n  } else if (user.role == 0) {\r\n    var company = await Company.find({ userid: req.uId }).skip(startIndex).limit(limit);\r\n  }\r\n\r\n  const totalcompany = await Company.find({ userid: req.uId }).countDocuments();\r\n  const tPage = totalcompany / limit;\r\n  const totalPage = Math.ceil(tPage);\r\n\r\n  giveresponse(res, 200, true, \"All Company get succesfully\", { totalPage, totalcompany, page, company });\r\n});\r\n\r\n// admin\r\n// get single company all details\r\nexports.singleCompanyAllDetails = asynchandler(async (req, res, next) => {\r\n  const company_id = req.body.company_id;\r\n\r\n  const company = await Company.aggregate([\r\n    {\r\n      $match: {\r\n        _id: mongoose.Types.ObjectId(company_id),\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"agents\",\r\n        localField: \"_id\",\r\n        foreignField: \"company_Id\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              email: 1,\r\n              address: 1,\r\n              agentType: 1,\r\n              agentStatus: 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"agent\",\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"directors\",\r\n        localField: \"_id\",\r\n        foreignField: \"company_Id\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              \"director.fname\": 1,\r\n              \"director.lname\": 1,\r\n              \"director.address\": 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"director\",\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"members\",\r\n        localField: \"_id\",\r\n        foreignField: \"company_Id\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              \"member.fname\": 1,\r\n              \"member.lname\": 1,\r\n              \"member.address\": 1,\r\n              \"member._id\": 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"member\",\r\n      },\r\n    },\r\n    {\r\n      $lookup: {\r\n        from: \"taxid_nums\",\r\n        localField: \"_id\",\r\n        foreignField: \"company_Id\",\r\n        pipeline: [\r\n          {\r\n            $project: {\r\n              fname: 1,\r\n              lname: 1,\r\n              street_address: 1,\r\n              city: 1,\r\n              zip_code: 1,\r\n              ein2Text: 1,\r\n            },\r\n          },\r\n        ],\r\n        as: \"tax_info\",\r\n      },\r\n    },\r\n  ]);\r\n\r\n  return giveresponse(res, 200, true, \"Company list get successfully\", company);\r\n});\r\n"
    }
  ]
}
