{
    "sourceFile": "controller/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1671163867935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1671163879596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\n const asyncHandler = require(\"../middleware/async\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const Agent = require(\"../Model/agent\");\r\n+const Agent = require(\"../Model/agents\");\r\n const User = require(\"../Model/user\");\r\n \r\n //admin login\r\n exports.adminLogin = asyncHandler(async (req, res, next) => {\r\n"
                },
                {
                    "date": 1671163920021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\n const asyncHandler = require(\"../middleware/async\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const Agent = require(\"../Model/agents\");\r\n+const Agent = require(\"../Model/agent\");\r\n const User = require(\"../Model/user\");\r\n \r\n //admin login\r\n exports.adminLogin = asyncHandler(async (req, res, next) => {\r\n"
                },
                {
                    "date": 1671164062259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\n const asyncHandler = require(\"../middleware/async\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const Agent = require(\"../Model/agent\");\r\n-const User = require(\"../Model/user\");\r\n+// const Agent = require(\"../Model/agent\");\r\n+// const User = require(\"../Model/user\");\r\n \r\n //admin login\r\n exports.adminLogin = asyncHandler(async (req, res, next) => {\r\n   const { email } = req.body;\r\n"
                },
                {
                    "date": 1671164068304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\n const asyncHandler = require(\"../middleware/async\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-// const Agent = require(\"../Model/agent\");\r\n-// const User = require(\"../Model/user\");\r\n+const Agent = require(\"../Model/agent\");\r\n+const User = require(\"../Model/user\");\r\n \r\n //admin login\r\n exports.adminLogin = asyncHandler(async (req, res, next) => {\r\n   const { email } = req.body;\r\n"
                },
                {
                    "date": 1671164179688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\n const asyncHandler = require(\"../middleware/async\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const Agent = require(\"../Model/agent\");\r\n+const Agent = require(\"../Model/Agent\");\r\n const User = require(\"../Model/user\");\r\n \r\n //admin login\r\n exports.adminLogin = asyncHandler(async (req, res, next) => {\r\n"
                }
            ],
            "date": 1671163867935,
            "name": "Commit-0",
            "content": "const { giveresponse, makeid, s3_upload } = require(\"../helper/res_help\");\r\nconst asyncHandler = require(\"../middleware/async\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst Agent = require(\"../Model/agent\");\r\nconst User = require(\"../Model/user\");\r\n\r\n//admin login\r\nexports.adminLogin = asyncHandler(async (req, res, next) => {\r\n  const { email } = req.body;\r\n  if (!email || !req.body.password) {\r\n    return giveresponse(res, 400, false, \"Please provide email and password\");\r\n  }\r\n  const user = await User.findOne({ email, role: 1 }).select(\"+password\");\r\n  if (!user) {\r\n    return giveresponse(res, 400, false, \"User does not exists\");\r\n  }\r\n  const isMatch = await user.matchPassword(req.body.password);\r\n  if (!isMatch) {\r\n    return giveresponse(res, 400, false, \"Invalid credentials\");\r\n  }\r\n  const token = await user.generateAuthToken();\r\n  const { password, is_varified, is_social, google_login, facebook_login, resetToken, status, ...info } = user?._doc;\r\n  info.token = token;\r\n  giveresponse(res, 200, true, \"Login successfull!\", info);\r\n});\r\n\r\n// add or update sub admin\r\nexports.addSubAdmin = asyncHandler(async (req, res, next) => {\r\n  const { email, fname, profile_img } = req.body;\r\n  let user;\r\n\r\n  const user1 = await User.findOne({ email });\r\n  const hashPass = await bcrypt.hash(req.body.password, 8);\r\n\r\n  if (req.body._id) {\r\n    user = await User.findByIdAndUpdate({ _id: req.body._id }, { $set: { fname, profile_img, role: 2, password: hashPass } }, { new: true });\r\n  } else {\r\n    if (user1) {\r\n      return giveresponse(res, 400, false, \"User already exist with given email!\");\r\n    }\r\n\r\n    user = new User({ email, profile_img, fname, role: 2, password: hashPass });\r\n    await user.save();\r\n  }\r\n\r\n  const { password, ...info } = req.body;\r\n  let msg = req.body?._id ? \"User updated successfully!\" : \"User added successfully!\";\r\n  giveresponse(res, 200, true, msg, info);\r\n});\r\n\r\n// get admin profile\r\nexports.getAdminInfo = asyncHandler(async (req, res, next) => {\r\n  const user = await User.findById({ _id: req.uId });\r\n  const { is_varified, is_social, google_login, facebook_login, resetToken, status, ...info } = user?._doc;\r\n  return giveresponse(res, 200, true, \"User detail get successfully!\", info);\r\n});\r\n\r\n// change admin profile\r\nexports.changeAdminProfile = asyncHandler(async (req, res, next) => {\r\n  const { profile_img, fname } = req.body;\r\n  const user = await User.findById({ _id: req.uId }).select(\"+password\");\r\n  if (!user) {\r\n    return giveresponse(res, 400, false, \"User not found!\");\r\n  }\r\n\r\n  const hashPass = await bcrypt.hash(req.body.password, 8);\r\n  const newUser = await User.findByIdAndUpdate({ _id: req.uId }, { $set: { profile_img, fname, password: hashPass } }, { new: true });\r\n  const { password, role, phone, resetToken, status, facebook_login, google_login, is_social, is_varified, ...info } = newUser?._doc;\r\n  return giveresponse(res, 200, true, \"Profile updated successfully!\", info);\r\n});\r\n\r\nexports.getAllAgent = asyncHandler(async (req, res, next) => {\r\n  const { sort, order } = req.body;\r\n  let find = {};\r\n  var sortObject = {};\r\n  var stype = sort ? sort : \"createdAt\";\r\n  var sdir = order === \"ASC\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  if (req.body.search) {\r\n    find = {\r\n      $or: [\r\n        {\r\n          fname: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n        {\r\n          email: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n        {\r\n          lname: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  } else {\r\n    find = {};\r\n  }\r\n\r\n  const agents = await Agent.find(find).skip(startIndex).limit(limit).sort(sortObject);\r\n  const totalRecord = await Agent.find().countDocuments();\r\n  const tpage = totalRecord / limit;\r\n  const totalPage = Math.ceil(tpage);\r\n\r\n  if (agents.length === 0) {\r\n    return giveresponse(res, 400, false, \"No data found!\");\r\n  }\r\n  giveresponse(res, 200, true, \"Agent data get successfully!\", { totalPage, totalRecord, page, agents });\r\n});\r\n\r\n// populate company of agent\r\nexports.getAgentDetail = asyncHandler(async (req, res, next) => {\r\n  const agentDetail = await Agent.findById({ _id: req.body._id });\r\n  giveresponse(res, 200, true, \"Agent detail get successfully!\", agentDetail);\r\n});\r\n\r\n// =================================================   User Details Admin Route ======================================================\r\n\r\n// get user list\r\nexports.userList = asyncHandler(async (req, res, next) => {\r\n  const { sort, order } = req.body;\r\n\r\n  let find = {};\r\n  var sortObject = {};\r\n  const stype = sort ? sort : \"createdAt\";\r\n  const sdir = (order && order?.toLowerCase()) == \"asc\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  if (req.body.search) {\r\n    find = {\r\n      $or: [\r\n        {\r\n          fname: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n        {\r\n          email: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n        {\r\n          lname: {\r\n            $regex: `.*${req.body.search?.trim()}.*`,\r\n            $options: \"i\",\r\n          },\r\n        },\r\n      ],\r\n      role: 0,\r\n    };\r\n  } else {\r\n    find = { role: 0 };\r\n  }\r\n  const allUser = await User.find(find).populate(\"companyCount\").select(\"fname lname email companyCount\").skip(startIndex).limit(limit).sort(sortObject);\r\n\r\n  const totalRecord = await User.find(find).populate(\"companyCount\").select(\"fname lname email companyCount\").countDocuments();\r\n  const tpage = totalRecord / limit;\r\n  const totalPage = Math.ceil(tpage);\r\n  if (allUser.length == 0) {\r\n    return giveresponse(res, 400, false, \"User not found\");\r\n  }\r\n  giveresponse(res, 200, true, \"All user get successfully!\", { totalPage, totalRecord, page, allUser });\r\n});\r\n\r\n//  get users company\r\nexports.usersCompany = asyncHandler(async (req, res, next) => {\r\n  const { sort, order } = req.body;\r\n\r\n  var sortObject = {};\r\n  const stype = sort ? sort : \"createdAt\";\r\n  const sdir = (order && order?.toLowerCase()) == \"asc\" ? 1 : -1;\r\n  sortObject[stype] = sdir;\r\n\r\n  const page = req.body.page && req.body.page != 0 ? req.body.page : 1;\r\n  const limit = req.body.limit && req.body.limit != 0 ? req.body.limit : 10;\r\n  const startIndex = (page - 1) * limit;\r\n\r\n  const user = await User.find({ _id: req.body._id }).populate({\r\n    path: \"company\",\r\n    match: {\r\n      $or: [{ company_name: { $regex: req.body.search?.trim(), $options: \"i\" } }, { designator: { $regex: req.body.search?.trim(), $options: \"i\" } }],\r\n    },\r\n    options: {\r\n      skip: startIndex,\r\n      limit: limit,\r\n      sort: sortObject,\r\n    },\r\n  });\r\n  const total = await User.find({ _id: req.body._id }).populate(\"company\");\r\n  const totalRecord = total[0]?.company?.length;\r\n  const tpage = totalRecord / limit;\r\n  const totalPage = Math.ceil(tpage);\r\n  if (!user) {\r\n    return giveresponse(res, 400, false, \"User not found!\");\r\n  }\r\n  giveresponse(res, 200, true, \"User's all company get successfully!\", { page, totalPage, totalRecord, comapany: user[0]?.company });\r\n});\r\n"
        }
    ]
}